{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1 \u0442\u044b\u043a","title":"\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435"},{"location":"#1","text":"\u0442\u044b\u043a","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f 1"},{"location":"lr1/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0422\u0435\u043c\u0430 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u041c\u043e\u0434\u0435\u043b\u0438 (lib/models.py) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from datetime import datetime from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship from sqlalchemy import JSON class SkillEnum(str, Enum): frontend = \"Frontend\" backend = \"Backend\" fullstack = \"Fullstack\" devops = \"DevOps\" mobile = \"Mobile\" data_science = \"Data Science\" class UserTeam(SQLModel, table=True): team_id: Optional[int] = Field( default=None, foreign_key=\"team.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) position: str class UserProfile(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) user: Optional[\"User\"] = Relationship(back_populates=\"profile\") avatar: Optional[str] = None birth_date: Optional[str] = None skills: List[SkillEnum] = Field(sa_type=JSON) class UserDefault(SQLModel): username: str = Field(index=True) password: str = Field(max_length=256, min_length=6) class User(UserDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) teams: List[\"Team\"] = Relationship(back_populates=\"users\", link_model=UserTeam) profile_id: Optional[int] = Field(foreign_key=\"userprofile.id\") profile: UserProfile = Relationship(back_populates=\"user\") class UserWithProfile(UserDefault): profile: Optional[UserProfile] = None class TeamDefault(SQLModel): name: str class Team(TeamDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str users: List[User] = Relationship(back_populates=\"teams\", link_model=UserTeam) projects: List[\"Project\"] = Relationship(back_populates=\"team\") class TeamWithUsers(TeamDefault): users: List[UserWithProfile] = [] class ProjectDefault(SQLModel): name: str description: Optional[str] expected_result: Optional[str] class Project(ProjectDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) team_id: int = Field(foreign_key=\"team.id\") team: Team = Relationship(back_populates=\"projects\") tasks: List[\"Task\"] = Relationship(back_populates=\"project\") class ProjectWithTasksAndTeam(ProjectDefault): tasks: List[\"Task\"] = [] team: Optional[Team] = None class TaskDefault(SQLModel): name: str description: Optional[str] = None deadline: Optional[datetime] = None class Task(TaskDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) project_id: int = Field(foreign_key=\"project.id\") project: Optional[Project] = Relationship(back_populates=\"tasks\") \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c UserTeam \u043a\u0430\u043a \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c - \u0438\u043c\u0435\u0435\u043c \u0434\u0432\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043b\u044e\u0447\u0430 (team_id \u0438 user_id), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b team \u0438 user. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 User \u0438 Team. \u042d\u0442\u0430 \u0441\u0432\u044f\u0437\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u0438 \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. SQL-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0432 models.py : create table project ( id serial primary key, name varchar not null, description varchar, expected_result varchar, team_id integer references team not null ); create table task ( id serial primary key, name varchar not null, description varchar, deadline timestamp, project_id integer references project not null ); create table team ( id serial primary key, name varchar not null ); create table \"user\" ( id serial primary key, username varchar not null, password varchar not null, profile_id integer references userprofile, ); create table userprofile ( id serial primary key, avatar varchar, birth_date varchar, skills json not null ); create table userteam ( team_id integer references team not null, user_id integer references user not null, position varchar not null, primary key (team_id, user_id) ); \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b (endpoints/team.py, users.py) \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from datetime import datetime from fastapi import APIRouter, Depends, HTTPException from typing import List from pydantic import BaseModel from sqlmodel import select from db import get_session from lib.models import (User, UserTeam, Team, Project, Task, TeamWithUsers, ProjectDefault, ProjectWithTasksAndTeam, TaskDefault) team_router = APIRouter() # ---- TEAMS ---- # Create new team @team_router.post(\"/teams\", response_model=Team) def create_team(team: Team, session=Depends(get_session)): session.add(team) session.commit() session.refresh(team) return team @team_router.get(\"/teams\", response_model=List[Team]) def get_all_teams(session=Depends(get_session)): teams = session.query(Team).all() return teams # Get team by id with information about all users @team_router.get(\"/teams/{team_id}\", response_model=TeamWithUsers) def get_team_by_id(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") return team class AddUserToTeamRequest(BaseModel): position: str # Add user (by id) to team @team_router.post(\"/teams/{team_id}/users/{user_id}\") def add_user_to_team(team_id: int, user_id: int, request_body: AddUserToTeamRequest, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") try: user_team = UserTeam(user_id=user.id, team_id=team.id, position=request_body.position) session.add(user_team) session.commit() except Exception as e: return {\"message\": \"User already in team\"} return {\"message\": \"User added to team successfully\"} # Delete user from team @team_router.delete(\"/teams/{team_id}/users/{user_id}\") def delete_user_from_team(team_id: int, user_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") try: team.users.remove(user) session.commit() except Exception as e: return {\"message\": \"User not in team\"} return {\"message\": \"User removed from team successfully\"} # Delete team @team_router.delete(\"/teams/{team_id}\") def delete_team(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") session.delete(team) session.commit() return {\"message\": \"Team deleted successfully\"} # ---- PROJECTS ---- # Create project @team_router.post(\"/projects/\", response_model=Project) def create_project(project_data: ProjectDefault, team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") project = Project(team_id=team_id, **project_data.dict()) session.add(project) session.commit() session.refresh(project) return project # Get list of projects @team_router.get(\"/projects/\", response_model=List[Project]) def get_projects(session=Depends(get_session)): return session.query(Project).all() # Get project with task list by id @team_router.get(\"/projects/{project_id}/\", response_model=ProjectWithTasksAndTeam) def get_project_with_tasks(project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") return project # Get list of projects of certain team by id @team_router.get(\"/teams/{team_id}/projects/\", response_model=List[Project]) def get_projects_by_team_id(team_id: int, session=Depends(get_session)): return session.exec(select(Project).where(Project.team_id == team_id)).all() # Update project information @team_router.put(\"/projects/{project_id}/\", response_model=Project) def update_project(project_id: int, project_data: ProjectDefault, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") for field, value in project_data.dict(exclude_unset=True).items(): setattr(project, field, value) session.commit() session.refresh(project) return project # Delete project @team_router.delete(\"/projects/{project_id}/\") def delete_project(project_id: int, session=Depends(get_session)): project = session.query(Project).filter(Project.id == project_id).first() if not project: raise HTTPException(status_code=404, detail=\"Project not found\") session.delete(project) session.commit() return {\"message\": \"Project deleted successfully\"} # ---- TASKS ---- # Create task @team_router.post(\"/tasks/\", response_model=Task) # /tasks/?project_id=value def create_task(task_data: TaskDefault, project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") task = Task(project_id=project_id, **task_data.dict()) session.add(task) session.commit() session.refresh(task) return task # List all tasks @team_router.get(\"/tasks/\", response_model=List[Task]) def list_all_tasks(session=Depends(get_session)): return session.query(Task).all() # List all tasks of certain project @team_router.get(\"/projects/{project_id}/tasks/\", response_model=List[Task]) def list_tasks_by_project(project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") return session.exec(select(Task).where(Task.project_id == project_id)).all() # Get certain task by id @team_router.get(\"/tasks/{task_id}/\", response_model=Task) def get_task_by_id(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") return task # Update task by id @team_router.put(\"/tasks/{task_id}/\", response_model=Task) def update_task(task_id: int, task_data: Task, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") for field, value in task_data.dict(exclude_unset=True).items(): setattr(task, field, value) session.commit() session.refresh(task) return task # List all tasks with missed deadlines @team_router.get(\"/tasks/urgent/\", response_model=List[Task]) def get_urgent_tasks(session=Depends(get_session)): urgent_tasks = session.exec(select(Task).where(Task.deadline < datetime.now())).all() return urgent_tasks # Delete task by id @team_router.delete(\"/tasks/{task_id}/\") def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") session.delete(task) session.commit() return {\"message\": \"Task deleted successfully\"} from datetime import datetime from fastapi import APIRouter, Depends, HTTPException from typing import List from sqlmodel import select from typing_extensions import TypedDict from auth import AuthHandler from db import get_session from lib.models import User, UserProfile, UserDefault, UserWithProfile from repos.users import find_user users_router = APIRouter() auth_handler = AuthHandler() @users_router.get(\"/users\") def get_users(session=Depends(get_session)) -> List[User]: return session.exec(select(User)).all() @users_router.patch(\"/users/{user_id}\", response_model=User) def update_user(user_id: int, profile_data: UserProfile, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") # Get the user's existing profile profile = user.profile # Update profile data profile_data_dict = profile_data.dict(exclude_unset=True) for key, value in profile_data_dict.items(): setattr(profile, key, value) session.commit() session.refresh(profile) return profile @users_router.get('/users/me', response_model=UserWithProfile) def get_current_user(user: User = Depends(auth_handler.get_current_user), session=Depends(get_session)): userWithProfile = session.get(User, user.id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return userWithProfile # Get User by ID @users_router.get(\"/users/{user_id}\", response_model=UserWithProfile) def get_user(user_id: int, session=Depends(get_session)) -> User: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user # Delete User @users_router.delete(\"/users/{user_id}\") def delete_user(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"message\": str}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") session.delete(user) session.commit() return {\"message\": \"User deleted successfully\"} @users_router.post('/registration') def register(user_data: UserDefault, profile_data: UserProfile, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): users = session.exec(select(User)).all() if any(x.username == user_data.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user_data.password) profile = UserProfile(**profile_data.dict()) session.add(profile) session.commit() session.refresh(profile) user = User(password=hashed_pwd, username=user_data.username) user.profile = profile session.add(user) session.commit() session.refresh(user) return {\"status\": 201, \"message\": \"User created successfully\"} @users_router.post('/login') def login(user: UserDefault) -> TypedDict('Response', {\"token\": str}): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token} \u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414 (db.py, .env) \u041a\u043e\u0434 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0411\u0414. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from sqlmodel import SQLModel, Session, create_engine from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DATABASE_URL\") engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session DATABASE_URL=postgresql://postgres:demid@localhost/warriors_db \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (auth.py) \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : import datetime from fastapi import Security, HTTPException from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from repos.users import find_user class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = 'very-very-secret-key' def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if user is None: raise credentials_exception return user \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043b\u0430\u0441\u0441 AuthHandler, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0428\u0430\u0433\u0438 : \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441\u044b: datetime, HTTPBearer, HTTPAuthorizationCredentials, CryptContext \u0438 jwt. \u041e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 AuthHandler, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412 \u043a\u043b\u0430\u0441\u0441\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: security - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 HTTPBearer, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u0430. pwd_context - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 CryptContext, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. secret - \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041c\u0435\u0442\u043e\u0434 get_password_hash \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0445\u0435\u0448. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pwd_context \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 bcrypt. \u041c\u0435\u0442\u043e\u0434 verify_password \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pwd_context \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u041c\u0435\u0442\u043e\u0434 encode_token \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 JWT (JSON Web Token). \u0412 JWT \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: 'exp' (\u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f) - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043b\u044e\u0441 24 \u0447\u0430\u0441\u0430. 'iat' (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0434\u0430\u0447\u0438) - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f. 'sub' (\u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a) - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 JWT \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430. \u041c\u0435\u0442\u043e\u0434 decode_token \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0438 \u0440\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0435\u0433\u043e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0435\u0433\u043e \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d, \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ('sub' \u0438\u0437 \u0442\u043e\u043a\u0435\u043d\u0430). \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d, \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 HTTPException. \u041c\u0435\u0442\u043e\u0434 auth_wrapper \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434 get_current_user \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c. \u041e\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 HTTPException. \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044f passlib \u0438 \u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 CryptContext. \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 hash \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u043e\u043b\u0435\u043c, \u043f\u0430\u0440\u043e\u043b\u044c \u0445\u0435\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 bcrypt). \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c verify \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u043e\u043b\u0435\u043c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u043c\u0435\u0442\u043e\u0434 verify \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - False. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 GitHub : \u0442\u044b\u043a","title":"\u041b/\u0420 \u21161"},{"location":"lr1/#_1","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0422\u0435\u043c\u0430 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lr1/#libmodelspy","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from datetime import datetime from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship from sqlalchemy import JSON class SkillEnum(str, Enum): frontend = \"Frontend\" backend = \"Backend\" fullstack = \"Fullstack\" devops = \"DevOps\" mobile = \"Mobile\" data_science = \"Data Science\" class UserTeam(SQLModel, table=True): team_id: Optional[int] = Field( default=None, foreign_key=\"team.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) position: str class UserProfile(SQLModel, table=True): id: Optional[int] = Field(default=None, primary_key=True) user: Optional[\"User\"] = Relationship(back_populates=\"profile\") avatar: Optional[str] = None birth_date: Optional[str] = None skills: List[SkillEnum] = Field(sa_type=JSON) class UserDefault(SQLModel): username: str = Field(index=True) password: str = Field(max_length=256, min_length=6) class User(UserDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) teams: List[\"Team\"] = Relationship(back_populates=\"users\", link_model=UserTeam) profile_id: Optional[int] = Field(foreign_key=\"userprofile.id\") profile: UserProfile = Relationship(back_populates=\"user\") class UserWithProfile(UserDefault): profile: Optional[UserProfile] = None class TeamDefault(SQLModel): name: str class Team(TeamDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) name: str users: List[User] = Relationship(back_populates=\"teams\", link_model=UserTeam) projects: List[\"Project\"] = Relationship(back_populates=\"team\") class TeamWithUsers(TeamDefault): users: List[UserWithProfile] = [] class ProjectDefault(SQLModel): name: str description: Optional[str] expected_result: Optional[str] class Project(ProjectDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) team_id: int = Field(foreign_key=\"team.id\") team: Team = Relationship(back_populates=\"projects\") tasks: List[\"Task\"] = Relationship(back_populates=\"project\") class ProjectWithTasksAndTeam(ProjectDefault): tasks: List[\"Task\"] = [] team: Optional[Team] = None class TaskDefault(SQLModel): name: str description: Optional[str] = None deadline: Optional[datetime] = None class Task(TaskDefault, table=True): id: Optional[int] = Field(default=None, primary_key=True) project_id: int = Field(foreign_key=\"project.id\") project: Optional[Project] = Relationship(back_populates=\"tasks\") \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c UserTeam \u043a\u0430\u043a \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c - \u0438\u043c\u0435\u0435\u043c \u0434\u0432\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043b\u044e\u0447\u0430 (team_id \u0438 user_id), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u044b team \u0438 user. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 User \u0438 Team. \u042d\u0442\u0430 \u0441\u0432\u044f\u0437\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u0438 \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. SQL-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0432 models.py : create table project ( id serial primary key, name varchar not null, description varchar, expected_result varchar, team_id integer references team not null ); create table task ( id serial primary key, name varchar not null, description varchar, deadline timestamp, project_id integer references project not null ); create table team ( id serial primary key, name varchar not null ); create table \"user\" ( id serial primary key, username varchar not null, password varchar not null, profile_id integer references userprofile, ); create table userprofile ( id serial primary key, avatar varchar, birth_date varchar, skills json not null ); create table userteam ( team_id integer references team not null, user_id integer references user not null, position varchar not null, primary key (team_id, user_id) );","title":"\u041c\u043e\u0434\u0435\u043b\u0438 (lib/models.py)"},{"location":"lr1/#endpointsteampy-userspy","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from datetime import datetime from fastapi import APIRouter, Depends, HTTPException from typing import List from pydantic import BaseModel from sqlmodel import select from db import get_session from lib.models import (User, UserTeam, Team, Project, Task, TeamWithUsers, ProjectDefault, ProjectWithTasksAndTeam, TaskDefault) team_router = APIRouter() # ---- TEAMS ---- # Create new team @team_router.post(\"/teams\", response_model=Team) def create_team(team: Team, session=Depends(get_session)): session.add(team) session.commit() session.refresh(team) return team @team_router.get(\"/teams\", response_model=List[Team]) def get_all_teams(session=Depends(get_session)): teams = session.query(Team).all() return teams # Get team by id with information about all users @team_router.get(\"/teams/{team_id}\", response_model=TeamWithUsers) def get_team_by_id(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") return team class AddUserToTeamRequest(BaseModel): position: str # Add user (by id) to team @team_router.post(\"/teams/{team_id}/users/{user_id}\") def add_user_to_team(team_id: int, user_id: int, request_body: AddUserToTeamRequest, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") try: user_team = UserTeam(user_id=user.id, team_id=team.id, position=request_body.position) session.add(user_team) session.commit() except Exception as e: return {\"message\": \"User already in team\"} return {\"message\": \"User added to team successfully\"} # Delete user from team @team_router.delete(\"/teams/{team_id}/users/{user_id}\") def delete_user_from_team(team_id: int, user_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") try: team.users.remove(user) session.commit() except Exception as e: return {\"message\": \"User not in team\"} return {\"message\": \"User removed from team successfully\"} # Delete team @team_router.delete(\"/teams/{team_id}\") def delete_team(team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") session.delete(team) session.commit() return {\"message\": \"Team deleted successfully\"} # ---- PROJECTS ---- # Create project @team_router.post(\"/projects/\", response_model=Project) def create_project(project_data: ProjectDefault, team_id: int, session=Depends(get_session)): team = session.get(Team, team_id) if not team: raise HTTPException(status_code=404, detail=\"Team not found\") project = Project(team_id=team_id, **project_data.dict()) session.add(project) session.commit() session.refresh(project) return project # Get list of projects @team_router.get(\"/projects/\", response_model=List[Project]) def get_projects(session=Depends(get_session)): return session.query(Project).all() # Get project with task list by id @team_router.get(\"/projects/{project_id}/\", response_model=ProjectWithTasksAndTeam) def get_project_with_tasks(project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") return project # Get list of projects of certain team by id @team_router.get(\"/teams/{team_id}/projects/\", response_model=List[Project]) def get_projects_by_team_id(team_id: int, session=Depends(get_session)): return session.exec(select(Project).where(Project.team_id == team_id)).all() # Update project information @team_router.put(\"/projects/{project_id}/\", response_model=Project) def update_project(project_id: int, project_data: ProjectDefault, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") for field, value in project_data.dict(exclude_unset=True).items(): setattr(project, field, value) session.commit() session.refresh(project) return project # Delete project @team_router.delete(\"/projects/{project_id}/\") def delete_project(project_id: int, session=Depends(get_session)): project = session.query(Project).filter(Project.id == project_id).first() if not project: raise HTTPException(status_code=404, detail=\"Project not found\") session.delete(project) session.commit() return {\"message\": \"Project deleted successfully\"} # ---- TASKS ---- # Create task @team_router.post(\"/tasks/\", response_model=Task) # /tasks/?project_id=value def create_task(task_data: TaskDefault, project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") task = Task(project_id=project_id, **task_data.dict()) session.add(task) session.commit() session.refresh(task) return task # List all tasks @team_router.get(\"/tasks/\", response_model=List[Task]) def list_all_tasks(session=Depends(get_session)): return session.query(Task).all() # List all tasks of certain project @team_router.get(\"/projects/{project_id}/tasks/\", response_model=List[Task]) def list_tasks_by_project(project_id: int, session=Depends(get_session)): project = session.get(Project, project_id) if not project: raise HTTPException(status_code=404, detail=\"Project not found\") return session.exec(select(Task).where(Task.project_id == project_id)).all() # Get certain task by id @team_router.get(\"/tasks/{task_id}/\", response_model=Task) def get_task_by_id(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") return task # Update task by id @team_router.put(\"/tasks/{task_id}/\", response_model=Task) def update_task(task_id: int, task_data: Task, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") for field, value in task_data.dict(exclude_unset=True).items(): setattr(task, field, value) session.commit() session.refresh(task) return task # List all tasks with missed deadlines @team_router.get(\"/tasks/urgent/\", response_model=List[Task]) def get_urgent_tasks(session=Depends(get_session)): urgent_tasks = session.exec(select(Task).where(Task.deadline < datetime.now())).all() return urgent_tasks # Delete task by id @team_router.delete(\"/tasks/{task_id}/\") def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"Task not found\") session.delete(task) session.commit() return {\"message\": \"Task deleted successfully\"} from datetime import datetime from fastapi import APIRouter, Depends, HTTPException from typing import List from sqlmodel import select from typing_extensions import TypedDict from auth import AuthHandler from db import get_session from lib.models import User, UserProfile, UserDefault, UserWithProfile from repos.users import find_user users_router = APIRouter() auth_handler = AuthHandler() @users_router.get(\"/users\") def get_users(session=Depends(get_session)) -> List[User]: return session.exec(select(User)).all() @users_router.patch(\"/users/{user_id}\", response_model=User) def update_user(user_id: int, profile_data: UserProfile, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") # Get the user's existing profile profile = user.profile # Update profile data profile_data_dict = profile_data.dict(exclude_unset=True) for key, value in profile_data_dict.items(): setattr(profile, key, value) session.commit() session.refresh(profile) return profile @users_router.get('/users/me', response_model=UserWithProfile) def get_current_user(user: User = Depends(auth_handler.get_current_user), session=Depends(get_session)): userWithProfile = session.get(User, user.id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return userWithProfile # Get User by ID @users_router.get(\"/users/{user_id}\", response_model=UserWithProfile) def get_user(user_id: int, session=Depends(get_session)) -> User: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user # Delete User @users_router.delete(\"/users/{user_id}\") def delete_user(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"message\": str}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") session.delete(user) session.commit() return {\"message\": \"User deleted successfully\"} @users_router.post('/registration') def register(user_data: UserDefault, profile_data: UserProfile, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): users = session.exec(select(User)).all() if any(x.username == user_data.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user_data.password) profile = UserProfile(**profile_data.dict()) session.add(profile) session.commit() session.refresh(profile) user = User(password=hashed_pwd, username=user_data.username) user.profile = profile session.add(user) session.commit() session.refresh(user) return {\"status\": 201, \"message\": \"User created successfully\"} @users_router.post('/login') def login(user: UserDefault) -> TypedDict('Response', {\"token\": str}): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token}","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b (endpoints/team.py, users.py)"},{"location":"lr1/#dbpy-env","text":"\u041a\u043e\u0434 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0441 \u0411\u0414. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : from sqlmodel import SQLModel, Session, create_engine from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DATABASE_URL\") engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session DATABASE_URL=postgresql://postgres:demid@localhost/warriors_db","title":"\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414 (db.py, .env)"},{"location":"lr1/#authpy","text":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 : import datetime from fastapi import Security, HTTPException from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from repos.users import find_user class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = 'very-very-secret-key' def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if user is None: raise credentials_exception return user \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043b\u0430\u0441\u0441 AuthHandler, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0428\u0430\u0433\u0438 : \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441\u044b: datetime, HTTPBearer, HTTPAuthorizationCredentials, CryptContext \u0438 jwt. \u041e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u0442\u044b/\u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 AuthHandler, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412 \u043a\u043b\u0430\u0441\u0441\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438: security - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 HTTPBearer, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u0430. pwd_context - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 CryptContext, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. secret - \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041c\u0435\u0442\u043e\u0434 get_password_hash \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0445\u0435\u0448. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pwd_context \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 bcrypt. \u041c\u0435\u0442\u043e\u0434 verify_password \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u0438 \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u041e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 pwd_context \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. \u041c\u0435\u0442\u043e\u0434 encode_token \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 JWT (JSON Web Token). \u0412 JWT \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: 'exp' (\u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f) - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043b\u044e\u0441 24 \u0447\u0430\u0441\u0430. 'iat' (\u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0434\u0430\u0447\u0438) - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f. 'sub' (\u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a) - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 JWT \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430. \u041c\u0435\u0442\u043e\u0434 decode_token \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0438 \u0440\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0435\u0433\u043e, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0435\u0433\u043e \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d, \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ('sub' \u0438\u0437 \u0442\u043e\u043a\u0435\u043d\u0430). \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d, \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 HTTPException. \u041c\u0435\u0442\u043e\u0434 auth_wrapper \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434 get_current_user \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 FastAPI \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c. \u041e\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0438\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 HTTPException. \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044f passlib \u0438 \u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 CryptContext. \u041f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 hash \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u043e\u043b\u0435\u043c, \u043f\u0430\u0440\u043e\u043b\u044c \u0445\u0435\u0448\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 bcrypt). \u0425\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c verify \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u043e\u043b\u0435\u043c \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u043c\u0435\u0442\u043e\u0434 verify \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - False. \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 GitHub : \u0442\u044b\u043a","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (auth.py)"}]}